import React, { useState, useEffect } from 'react';
import firebase from 'firebase/app';
import 'firebase/auth';
import 'firebase/firestore';


function App() {
  const [usuario, setUsuario] = useState(null);
  const [activos, setActivos] = useState([]);
  const [activoSeleccionado, setActivoSeleccionado] = useState(null);

  useEffect(() => {
    const desuscribir = firebase.auth().onAuthStateChanged((usuario) => {
      setUsuario(usuario);
    });

    return () => desuscribir();
  }, []);

  useEffect(() => {
    if (usuario) {
      // Obtener activos de la base de datos
      const activosRef = db.collection('activos');
      activosRef.get().then((querySnapshot) => {
        const datos = [];
        querySnapshot.forEach((doc) => {
          datos.push({ id: doc.id, ...doc.data() });
        });
        setActivos(datos);
      });
    }
  }, [usuario]);

  const hacerCheckIn = () => {
    
    
    if (activoSeleccionado) {
      // Actualiza el estado del activo a "En uso" en la base de datos
      db.collection('activos')
        .doc(activoSeleccionado.id)
        .update({
          estado: 'En uso',
          checkInPor: usuario.uid, // Almacena el ID del usuario para referencia
          fechaCheckIn: firebase.firestore.FieldValue.serverTimestamp(),
        });
      setActivoSeleccionado(null);
    }
  };

  const hacerCheckOut = () => {
    // Implementa tu lógica de check-out aquí
    // Puedes actualizar el estado del activo y crear un registro de check-out en la base de datos
    if (activoSeleccionado) {
      // Actualiza el estado del activo a "Disponible" en la base de datos
      db.collection('activos')
        .doc(activoSeleccionado.id)
        .update({
          estado: 'Disponible',
          checkInPor: null, // Borra el ID del usuario que hizo el check-out
          fechaCheckIn: null, // Borra la marca de tiempo de check-in
        });
      setActivoSeleccionado(null);
    }
  };

  const seleccionarActivo = (activo) => {
    setActivoSeleccionado(activo);
  };

  return (
    <div className="App">
      <header className="App-header">
        <h1>Sistema de Gestión de Activos</h1>
        {usuario ? (
          <div>
            <p>Bienvenido, {usuario.displayName}!</p>
            <h2>Activos</h2>
            <ul>
              {activos.map((activo) => (
                <li
                  key={activo.id}
                  onClick={() => seleccionarActivo(activo)}
                  style={{
                    cursor: 'pointer',
                    fontWeight:
                      activoSeleccionado && activoSeleccionado.id === activo.id
                        ? 'bold'
                        : 'normal',
                  }}
                >
                  {activo.nombre} ({activo.estado})
                </li>
              ))}
            </ul>
            <div>
              {activoSeleccionado && activoSeleccionado.estado === 'Disponible' ? (
                <button onClick={hacerCheckIn}>Check In</button>
              ) : activoSeleccionado && activoSeleccionado.estado === 'En uso' ? (
                <button onClick={hacerCheckOut}>Check Out</button>
              ) : null}
            </div>
          </div>
        ) : (
          <p>Inicia sesión para ver los activos.</p>
        )}
      </header>
    </div>
  );
}

export default App;